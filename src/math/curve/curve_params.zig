// code ported from starknet-curve:
// https://github.com/xJonathanLEI/starknet-rs/blob/0857bd6cd3bd34cbb06708f0a185757044171d8d/starknet-curve/src/curve_params.rs
const Felt252 = @import("../fields/starknet.zig").Felt252;
const bigInt = @import("../fields/biginteger.zig").bigInt;
const AffinePoint = @import("./short_weierstrass/affine.zig").AffinePoint;

/// Represents the order of the subgroup generated by the base point on the STARK-friendly elliptic curve.
///
/// The EC_ORDER constant defines the order of the subgroup generated by the base point on the elliptic curve used in the STARK scheme.
/// It is a crucial parameter in cryptographic operations, including ECDSA, as it determines the size of the cryptographic group.
/// The EC_ORDER is a large prime number, ensuring the security of the elliptic curve cryptographic scheme.
///
/// # Description
///
/// The EC_ORDER constant is represented as a field element (Felt252) initialized from a hexadecimal integer value.
/// It defines the order of the subgroup generated by the base point, ensuring that the discrete logarithm problem is hard to solve.
///
/// # Value
///
/// The value of EC_ORDER is derived from the hexadecimal integer:
/// 0x800000000000010ffffffffffffffffb781126dcae7b2321e66a241adc64d2f
///
/// # Remarks
///
/// - The EC_ORDER ensures the security of the STARK-friendly elliptic curve by defining the size of the subgroup.
/// - It is essential for cryptographic operations, including key generation and signature generation.
pub const EC_ORDER = Felt252.fromInt(
    u256,
    0x800000000000010ffffffffffffffffb781126dcae7b2321e66a241adc64d2f,
);

/// Represents the coefficient ùõº in the equation of the STARK-friendly elliptic curve.
///
/// The ALPHA constant defines the coefficient ùõº in the equation of the STARK-friendly elliptic curve.
/// It is a crucial parameter in defining the elliptic curve equation, which ensures cryptographic security and efficiency.
/// The value of ALPHA is typically chosen to meet specific security requirements and compatibility with cryptographic protocols.
///
/// # Description
///
/// The ALPHA constant is represented as a field element (Felt252) initialized to the value one.
/// It serves as the coefficient ùõº in the elliptic curve equation: ùë¶^2 ‚â° ùë•^3 + ùõº‚ãÖùë• + ùõΩ (mod ùëù).
///
/// # Value
///
/// The value of ALPHA is one, representing the identity element in field arithmetic operations.
///
/// # Remarks
///
/// - ALPHA is a fundamental parameter in defining the equation of the STARK-friendly elliptic curve.
/// - It is typically chosen to ensure the security and efficiency of cryptographic operations.
pub const ALPHA = Felt252.one();

/// Represents the coefficient ùõΩ in the equation of the STARK-friendly elliptic curve.
///
/// The BETA constant defines the coefficient ùõΩ in the equation of the STARK-friendly elliptic curve.
/// It is a crucial parameter in defining the elliptic curve equation, contributing to the curve's shape and cryptographic properties.
/// The value of BETA is typically chosen to meet specific security requirements and compatibility with cryptographic protocols.
///
/// # Description
///
/// The BETA constant is represented as a field element (Felt252) initialized from a hexadecimal integer value.
/// It serves as the coefficient ùõΩ in the elliptic curve equation: ùë¶^2 ‚â° ùë•^3 + ùõº‚ãÖùë• + ùõΩ (mod ùëù).
///
/// # Value
///
/// The value of BETA is derived from the hexadecimal integer:
/// 0x6f21413efbe40de150e596d72f7a8c5609ad26c15c915c1f4cdfcb99cee9e89
///
/// # Remarks
///
/// - BETA is a fundamental parameter in defining the equation of the STARK-friendly elliptic curve.
/// - It contributes to the curve's shape and ensures cryptographic security.
pub const BETA = Felt252.fromInt(
    u256,
    0x6f21413efbe40de150e596d72f7a8c5609ad26c15c915c1f4cdfcb99cee9e89,
);

/// Represents the base point of the elliptic curve, which generates a subgroup of large prime order `n`.
///
/// The generator point `G` is a fundamental point on the elliptic curve used in various cryptographic operations, including ECDSA.
/// It generates a subgroup of large prime order `n`, forming the basis for key generation and cryptographic operations.
///
/// # Description
///
/// The generator point `G` is defined by its x and y coordinates on the elliptic curve.
/// These coordinates are provided as field elements (Felt252) representing the x and y components of the point.
/// Additionally, the `infinity` flag indicates whether the point is at infinity or not.
///
/// # Parameters
///
/// * `x` - The x-coordinate of the generator point.
/// * `y` - The y-coordinate of the generator point.
/// * `infinity` - A boolean flag indicating whether the generator point is at infinity.
pub const GENERATOR: AffinePoint = .{
    .x = Felt252.fromInt(
        u256,
        0x1ef15c18599971b7beced415a40f0c7deacfd9b0d1819e03d723d8bc943cfca,
    ),
    .y = Felt252.fromInt(
        u256,
        0x5668060aa49730b7be4801df46ec62de53ecd11abe43a32873000c36e8dc1f,
    ),
    .infinity = false,
};

pub const SHIFT_POINT: AffinePoint = .{
    .x = .{
        .fe = bigInt(4).init(
            .{
                1933903796324928314,
                7739989395386261137,
                1641324389046377921,
                316327189671755572,
            },
        ),
    },
    .y = .{
        .fe = bigInt(4).init(
            .{
                14252083571674603243,
                12587053260418384210,
                4798858472748676776,
                81375596133053150,
            },
        ),
    },
    .infinity = false,
};

pub const PEDERSEN_P0: AffinePoint = .{
    .x = .{
        .fe = bigInt(4).init(
            .{
                3602345268353203007,
                13758484295849329960,
                518715844721862878,
                241691544791834578,
            },
        ),
    },
    .y = .{
        .fe = bigInt(4).init(
            .{
                13441546676070136227,
                13001553326386915570,
                433857700841878496,
                368891789801938570,
            },
        ),
    },
    .infinity = false,
};

pub const PEDERSEN_P1: AffinePoint = .{
    .x = .{
        .fe = bigInt(4).init(
            .{
                16491878934996302286,
                12382025591154462459,
                10043949394709899044,
                253000153565733272,
            },
        ),
    },
    .y = .{
        .fe = bigInt(4).init(
            .{
                13950428914333633429,
                2545498000137298346,
                5191292837124484988,
                285630633187035523,
            },
        ),
    },
    .infinity = false,
};

pub const PEDERSEN_P2: AffinePoint = .{
    .x = .{
        .fe = bigInt(4).init(
            .{
                1203723169299412240,
                18195981508842736832,
                12916675983929588442,
                338510149841406402,
            },
        ),
    },
    .y = .{
        .fe = bigInt(4).init(
            .{
                12352616181161700245,
                11743524503750604092,
                11088962269971685343,
                161068411212710156,
            },
        ),
    },
    .infinity = false,
};

pub const PEDERSEN_P3: AffinePoint = .{
    .x = .{
        .fe = bigInt(4).init(
            .{
                1145636535101238356,
                10664803185694787051,
                299781701614706065,
                425493972656615276,
            },
        ),
    },
    .y = .{
        .fe = bigInt(4).init(
            .{
                8187986478389849302,
                4428713245976508844,
                6033691581221864148,
                345457391846365716,
            },
        ),
    },
    .infinity = false,
};
